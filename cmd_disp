#!/imaging/local/software/anaconda/latest/x86_64/bin/python
"""
=========================================================
Continuously displays linux command output and highlights changes.
Linux command must be placed between + +.
Only works for commands "ls", "qstat", "ps".
Usage: cmd_disp + <command> + [-d <height>x<width>]
e.g. cmd_disp + ls -l + -d 200x100
Default text colour is black. Changes are highlighted in green.
For qstat, completed processes are highlighted in red.
The "Reset" button changes text to default colour.
The "Snap" button opens a new window with a snapshot of the 
current window (e.g. for copy&paste).
The "Quit" button - guess...
=========================================================
"""

# Olaf Hauk, Aug 2016, Feb 2017, Aug 2017

import sys
sys.path.append( '/imaging/local/software/anaconda/2.4.1/2/lib/python2.7/lib-tk')

reset_button = 0 # global, check if reset button pressed
def reset_click(): # invoked when reset button in pressed
    global reset_button
    reset_button = 1
    return 1

quit_button = 0 # global, check if quit button pressed
def quit_click(): # invoked when quit button in pressed
    global quit_button
    quit_button = 1
    return 1

snap_button = 0 # global, check if snap button pressed
def snap_click(): # invoked when snap button in pressed
    global snap_button
    snap_button = 1
    return 1    

import subprocess as sub
import Tkinter as tk
import pickle
import time
from copy import deepcopy


###
### get linux command and parameters from input
###

# get input
input_list = sys.argv[1:]

if not input_list:
    print "========================================================="
    print "Continuously displays linux command output and highlights changes."
    print "Linux command must be placed between + +."
    print "Usage: cmd_disp + <command> + [-d <height>x<width>]"
    print "e.g. cmd_disp + ls -l + -d 200x100"
    print "Default text colour is black. Changes are highlighted in green."
    print "For qstat, errors are highlighted in red."
    print "The \"Reset\" button changes text to default colour."
    print "The \"Snap\" button opens a new window with a snapshot of the "
    print "current window (e.g. for copy&paste)."
    print "The \"Quit\" button - guess..."
    print "Only works for commands \"ls\", \"qstat\", \"ps."
    print "========================================================="
    exit()

# time between command updates in s
sleep_time = 0.05

# get command between ++ as list
if not "+" in input_list:
    print "\nPlease put your command between +...+."
    exit()
else:
    idx1 = input_list.index("+")
    if not "+" in input_list[idx1+1:]:
        print "\nPlease put your command between +...+."
        exit()
    else:
        idx2 = idx1 + 1 + input_list[idx1+1:].index("+")
        command = input_list[idx1+1:idx2]

# get display parameters
# height/width of display window
if "-d" in input_list:
    d_idx = input_list.index("-d")
    d_str = input_list[d_idx+1]
    print d_str
    d_str = d_str.split("x")
    disp_dims = [int(d_str[0]), int(d_str[1])]
else:
    disp_dims = [50,100]

print disp_dims

# remove command from input
del input_list[idx2+1:]

command_string = ''
for cc in input_list:
    command_string = command_string + ' ' + cc

cmd_type = command[0] # what kind of command


# check if command works
err_code = sub.call(command, stderr=sub.STDOUT)
if err_code:
    print "\nYour command doesn't work with cmd_disp."
    exit()

###
### set up text display and parameters
###

# line colours: no change, smooth change, error (qstat)
colours = {'default': 'black', 'smooth': 'green', 'error': 'red'}

# create Tkinter window
tk_root = tk.Tk()
tk_root.title(command_string) # add window title

B1_frame = tk.Frame(tk_root) # frame for buttons at top
B1_frame.pack(side=tk.TOP)

B2_frame = tk.Frame(tk_root) # frame for buttons at bottom
B2_frame.pack(side=tk.BOTTOM)

T_frame = tk.Frame(tk_root) # frame for text
T_frame.pack(side=tk.BOTTOM, expand=True, fill='both')

# make text display
# wrap=None because it would affect scrollbar for long lines
T = tk.Text(T_frame, height=disp_dims[0], width=disp_dims[1], wrap=tk.NONE)

# add Y scrollbar
scrollbar_y = tk.Scrollbar(T_frame)
scrollbar_y.pack(side=tk.RIGHT, fill=tk.Y)

# link Y scrollbar and text
T.config(yscrollcommand=scrollbar_y.set)
scrollbar_y.config(command=T.yview)

# add X scrollbar
scrollbar_x = tk.Scrollbar(T_frame, orient=tk.HORIZONTAL)
scrollbar_x.pack(side=tk.BOTTOM, fill=tk.X)

# link X scrollbar and text
T.config(xscrollcommand=scrollbar_x.set)
scrollbar_x.config(command=T.xview)

# add reset button to text box
buttons = tk.Button(B1_frame, text="Reset", command=reset_click)
buttons.pack(padx=10, side=tk.LEFT)

# get snapshot of current screen
buttons = tk.Button(B1_frame, text="Snap", command=snap_click)
buttons.pack(side=tk.LEFT)

# add exit button to text box
buttons = tk.Button(B2_frame, text="QUIT", command=quit_click)
buttons.pack(side=tk.LEFT)


T.pack(expand=True, fill='both')

# 0: not allowed, 1: known with special instructions, 2: just display
# 'history' doesn't seem to work because it's a shell built-in command, not an executable
if cmd_type == 'ls':
    start_line = 0      # from which line to check for changes
    target_idx = -1     # by which item to identify names (e.g. filenames for ls)
    cmd_known = 1
elif cmd_type == 'qstat':
    if len(command)>1: # user name specified
        start_line = 1 # first line empty
    else: # nothing specified
        start_line = 0
    target_idx = 0
    cmd_known = 1
elif cmd_type == 'showq': ### not yet ready (format input)
    start_line = 0 # first line empty
    target_idx = 0
    cmd_known = 1
elif cmd_type == 'ps':
    start_line = 0 # first line empty
    target_idx = [] # to be determined "PID"
    cmd_known = 1
elif cmd_type == 'find': ### doesn't work properly with wildcards
# error message when file deleted
    start_line = 0 # first line empty
    target_idx = 1 # to be determined below
    cmd_known = 2
else:
    print "!!!\nCan't use this command: " + cmd_type 
    cmd_known = 0


###
### do the main work
###

# keep track of files and lines
out_keep = {'lines': {}, 'files': {}, 'colours': {}}

cnt = 0
while 1<2: # keep going until exit button pressed

    scroll_y, _ = T.yview() # keep scroll bar position
    scroll_x, _ = T.xview() # keep scroll bar position

    T.delete('1.0', tk.END) # delete display contents    

    try:
        output = sub.check_output(command) # get command output
    except:
        output = ''

    if not(output==''):
        out_list = output.splitlines()[start_line:] # get it line by line

        if cmd_known==1: # if there are special rules (e.g. for "ls", "qstat")

            if cmd_type == 'ps': # get column with status (R/C/E), -1 because of "Job ID"
                target_idx = out_list[0].split().index('PID')        

            targets = [out.split()[target_idx] for out in out_list] # get target names (e.g. file name or process) per line

            if out_list:
                if cmd_type == 'qstat': # get column with status (R/C/E), -1 because of "Job ID"
                    # take into account format difference depending on whether user name is specified or not
                    S_col = out_list[len(command)-1].split().index('S') - 1
            else:
                S_col = []

            for [lli,line] in enumerate(out_list):
            
                T.insert(tk.END, line+'\n')

                tag_str = str(lli+1)
                T.tag_add(tag_str, tag_str+".0", tag_str+"."+str(len(line)))        

                targ_now = targets[lli] # file of this line

                if targ_now in out_keep['files']: # check if file was present before
                    line_idx = targets.index(targ_now)
                                
                    if out_list[line_idx] != out_keep['lines'][targ_now]: # check if something has changed for this file
                        if cmd_type == 'qstat' and out_list[line_idx].split()[S_col] == 'C': # when completed: text in red
                            out_keep['colours'][targ_now] = colours['error']
                        else: # if something has changed and no error
                            if out_keep['colours'][targ_now] != colours['error']: # if there was an error, keep red
                                out_keep['colours'][targ_now] = colours['smooth'] # if something has changed, print text in green
                else:
                    if cnt>0: # if it's a new line added to existing line: smooth
                        out_keep['colours'][targ_now] = colours['smooth']
                    else: # if there are no lines yet: default
                        out_keep['colours'][targ_now] = colours['default'] # default colour       
                
                out_keep['lines'][targ_now] = line # keep line text
                out_keep['files'][targ_now] = lli # keep line number

                now_colour = out_keep['colours'][targ_now]
                T.tag_config(tag_str, background='white', foreground=now_colour)

        elif cmd_known == 2: # just display

            for [lli,line] in enumerate(out_list):
            
                T.insert(tk.END, line+'\n')

    T.yview_moveto(scroll_y) # keep scrollbar position
    T.xview_moveto(scroll_x) # keep scrollbar position

    tk_root.update()    

    time.sleep(sleep_time) # for some reason, without sleep subprocess throws an error

    cnt += 1

    # if reset button pressed, reset colours etc.
    if reset_button:
        out_keep = {'lines': {}, 'files': {}, 'colours': {}} # keep track of files and lines
        reset_button = 0
        cnt = 0

    if snap_button: # if snapshot requested
        snap_root = tk.Tk()
        snap_root.title(command_string) # add window title

        T_frame.update_idletasks() # make sure geometry info up-to-date
        height = T_frame.winfo_height() # get current window dimensions
        width = T_frame.winfo_width()

        # snapshot window has dimension of original window
        snap_frame = tk.Frame(snap_root, height=height, width=width) # frame for text
        snap_frame.pack_propagate(0) # otherwise frame will fit contents
        snap_frame.pack(side=tk.BOTTOM, expand=True, fill='both')        
        
        T_snap = tk.Text(snap_frame, wrap=tk.NONE)   

        # add Y scrollbar
        scrollbar_snap_y = tk.Scrollbar(snap_frame)
        scrollbar_snap_y.pack(side=tk.RIGHT, fill=tk.Y)        
        # link scrollbar and text
        T_snap.config(yscrollcommand=scrollbar_snap_y.set)
        scrollbar_snap_y.config(command=T_snap.yview)

        # add X scrollbar
        scrollbar_snap_x = tk.Scrollbar(snap_frame, orient=tk.HORIZONTAL)
        scrollbar_snap_x.pack(side=tk.BOTTOM, fill=tk.X)        
        # link scrollbar and text
        T_snap.config(xscrollcommand=scrollbar_snap_x.set)
        scrollbar_snap_x.config(command=T_snap.xview)        

        T_snap.pack(expand=True, fill='both')

        for [lli,line] in enumerate(out_list):        
            T_snap.insert(tk.END, line+'\n')        

        snap_root.update()

        # doesn't work, apparently because display takes too long to update?
        # T_snap.yview_moveto(scroll_y) # keep scrollbar position
        # T_snap.xview_moveto(scroll_x) # keep scrollbar position

        snap_button = 0

    if quit_button: # quit program if quit button pressed
        exit()

print "\nDone my bit. You are on your own now."